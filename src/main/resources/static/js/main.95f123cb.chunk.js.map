{"version":3,"sources":["components/styling.js","components/Home.js","components/Spinner.js","components/Currency.js","api/backend.js","components/PaycheckReport.js","components/FixBudgetForm.js","components/BudgetReport.js","components/BillsReport.js","components/CreateTransactionForm.js","components/TransactionReport.js","components/App.js","serviceWorker.js","index.js"],"names":["divStyling","width","margin","marginTop","Home","style","className","React","Component","Spinner","Currency","value","this","props","displayType","thousandSeparator","prefix","decimalScale","fixedDecimalScale","instance","axios","create","baseURL","createTransactionCommand","txDateString","creditAccountId","debitAccountId","transactionTypeId","description","authAmt","settAmt","canReconcile","successCallback","errorCallback","post","transactionDateString","authorizedAmount","settledAmount","headers","then","catch","err","moveBudgetForwardCommand","budgetMonth","budgetYear","createBudgetCommand","month","year","fixBudgetToMatchDeposits","budgetReport","fullDateToUse","getFullYear","getMonth","get","params","budget_year","budget_month","response","responseDate","Date","data","getObject","url","PaycheckReport","getPaycheckTotalLastMonth","reportData","totalPaychecksPreviousMonth","getPaychecks","Object","values","paychecksPreviousMonthArray","Table","celled","striped","compact","Header","Row","HeaderCell","Body","map","row","key","date","amount","Cell","FixBudgetForm","transactionTypes","transaction_type_id","name","state","redirect","submitUpdate","displayDate","stateCopy","JSON","parse","stringify","setState","console","log","errorInfo","isFormDisabled","getPaycheckBudgetDifference","budgetTotal","totalBudget","getPaycheckBudgetDifferenceString","diff","toFixed","nonNegDiff","Math","abs","suffix","concat","String","handleTransactionTypeChange","event","target","to","budgetDiff","budgetNoticeText","onChange","tt","type","disabled","onClick","BudgetReport","addOneMonth","subtractOneMonth","status","canShowCreateBudgetButton","getBudgetTotal","createBudget","onCreateBudgetSuccess","onError","componentDidMount","displayPreviousMonth","previousMonth","displayNextMonth","nextMonth","generateMonthString","toLocaleString","onSuccess","error","moveRemainingFundsToNextMonth","canMoveRemainingFundsToNextMonth","getBudgetRemaining","isViewingCurrentMonth","isNextMonthAfterCurrentMonth","current","localArray","transactionTypeReports","sort","a","b","sortOrderValue","totalRemainingBudget","yearMonthForHeading","unstackable","getSortedBudgetRows","transactionTypeName","budgetAmount","remainingAmount","BillsReport","billPayments","lastPaymentDate","getSortedRows","billName","active","autoPay","dueDayOfMonth","amountPaid","CreateTransactionForm","formDateString","formatDate","creditableAccounts","account_id","account_name","debitableAccounts","selectedDateUpdated","selectedCreditAccountUpdated","accountName","options","selectedIndex","text","account","find","it","selectedDebitAccountUpdated","selectedTransactionTypeUpdated","transactionTypeText","transactionType","selectedDescriptionUpdated","selectedAuthorizedAmountUpdated","selectedSettledAmountUpdated","selectedToggleCanTxReconcileUpdated","submitTransaction","preventDefault","creditable_accounts","debitable_accounts","transaction_types","creditableData","debitableData","transactionTypeData","d","day","getDate","length","join","formattedDate","onSubmit","defaultValue","acct","placeholder","Checkbox","label","defaultChecked","TransactionReport","transactions","transaction_date","debit_account_name","credit_account_name","category","authorized_amount","settled_amount","credit_or_debit","can_reconcile","transaction_id","percentage","App","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.95f123cb.chunk.js","sourcesContent":["export const divStyling = {\r\n    width: '75%',\r\n    margin: 'auto',\r\n    marginTop: '2%'\r\n};\r\n\r\n","import React from 'react';\r\nimport {divStyling} from \"./styling\";\r\n\r\n\r\nclass Home extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div style={divStyling}>\r\n                <h1 className=\"ui center aligned huge header\">Finances</h1>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\n\r\nclass Spinner extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"ui active dimmer\">\r\n                <div className=\"ui big text loader\">\r\n                    Loading...\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Spinner;","import NumberFormat from \"react-number-format\";\r\nimport React from \"react\";\r\n\r\n\r\nclass Currency extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <NumberFormat value={this.props.value/100} displayType={'text'} thousandSeparator={true} prefix={'$'} decimalScale={2} fixedDecimalScale={true} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Currency","import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'http://192.168.2.228:8080',\r\n});\r\n\r\nexport const createTransactionCommand = (txDateString, creditAccountId, debitAccountId, transactionTypeId, description, authAmt, settAmt, canReconcile, successCallback, errorCallback) => {\r\n    instance.post('/ws/transaction/create_new', {\r\n        transactionDateString: txDateString,\r\n        transactionTypeId: transactionTypeId,\r\n        description: description,\r\n        creditAccountId: creditAccountId,\r\n        debitAccountId: debitAccountId,\r\n        authorizedAmount: authAmt,\r\n        settledAmount: settAmt,\r\n        canReconcile: canReconcile\r\n   }, {\r\n       headers: {'Content-Type': 'application/json; charset=UTF-8'}\r\n   }).then(() => {\r\n       successCallback();\r\n   }).catch(err => {\r\n       errorCallback(err);\r\n   });\r\n    successCallback();\r\n};\r\n\r\nexport const moveBudgetForwardCommand = (budgetMonth, budgetYear, successCallback, errorCallback) => {\r\n    instance.post('/ws/budget/move_remainder_to_next_month_new', {\r\n        budgetMonth: budgetMonth,\r\n        budgetYear: budgetYear\r\n    }, {\r\n        headers: {'Content-Type': 'application/json; charset=UTF-8'}\r\n    }).then(() => {\r\n        successCallback();\r\n    }).catch(err => {\r\n        errorCallback(err);\r\n    });\r\n};\r\n\r\nexport const createBudgetCommand = (month, year, successCallback, errorCallback) => {\r\n    instance.post('/ws/budget/create_for_month_new', {\r\n        month: month,\r\n        year: year\r\n    }, {\r\n        headers: {'Content-Type': 'application/json; charset=UTF-8'}\r\n    }).then(() => {\r\n        successCallback();\r\n    }).catch(err => {\r\n        errorCallback(err);\r\n    });\r\n};\r\n\r\nexport const fixBudgetToMatchDeposits = (budgetMonth, budgetYear, transactionTypeId, successCallback, errorCallback) => {\r\n    instance.post('/ws/budget/fix_month_to_match_deposits_new', {\r\n        budgetMonth: budgetMonth,\r\n        budgetYear: budgetYear,\r\n        transactionTypeId: transactionTypeId\r\n    }, {\r\n        headers: {'Content-Type': 'application/json; charset=UTF-8'}\r\n    }).then(() => {\r\n        successCallback();\r\n    }).catch(err => {\r\n        errorCallback(err);\r\n    });\r\n};\r\n\r\nexport const transactionHistory = (successCallback, errorCallback) => {\r\n    getObject('/ws/transaction/report', successCallback, errorCallback);\r\n};\r\n\r\nexport const getCreateTransactionOptions = (successCallback) => {\r\n    getObject('/ws/accounts/creditable_accounts', (creditableData) => {\r\n        getObject('/ws/accounts/debitable_accounts', (debitableData) => {\r\n            getObject('/ws/transaction/types', (transactionTypeData) => {\r\n                successCallback({\r\n                    creditable_accounts: creditableData,\r\n                    debitable_accounts: debitableData,\r\n                    transaction_types: transactionTypeData\r\n                })\r\n            }, (error) => console.log(error));\r\n        }, (error) => console.log(error));\r\n    }, (error) => console.log(error));\r\n};\r\n\r\nexport const billsReport = (successCallback, errorCallback) => {\r\n    getObject('/ws/bills/report', successCallback, errorCallback);\r\n};\r\n\r\nexport const budgetReport = (successCallback, errorCallback, fullDateToUse) => {\r\n    let year = fullDateToUse.getFullYear();\r\n    let month = fullDateToUse.getMonth()+1;\r\n    instance.get('/ws/budget/report', {\r\n        params: {\r\n            budget_year: year,\r\n            budget_month: month\r\n        }\r\n    }).then(response => {\r\n        let responseDate = new Date(year, month-1);\r\n        successCallback(response.data, responseDate);\r\n    }).catch(err => {\r\n        errorCallback(err);\r\n    });\r\n};\r\n\r\nconst getObject = (url, successCallback, errorCallback) => {\r\n    instance.get(url)\r\n        .then(response => {\r\n            successCallback(response.data);\r\n        })\r\n        .catch(err => {\r\n            errorCallback(err);\r\n        });\r\n};","import React from 'react';\r\nimport {Table} from \"semantic-ui-react\";\r\nimport Currency from \"./Currency\";\r\nimport {divStyling} from \"./styling\";\r\n\r\nclass PaycheckReport extends React.Component {\r\n\r\n    getPaycheckTotalLastMonth = () => {\r\n        return this.props.reportData.totalPaychecksPreviousMonth;\r\n    };\r\n\r\n    getPaychecks = () => {\r\n        return Object.values(this.props.reportData.paychecksPreviousMonthArray);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div style={divStyling}>\r\n                <p>Paycheck total: <Currency value={this.getPaycheckTotalLastMonth()} /></p>\r\n                <Table celled striped compact>\r\n                    <Table.Header>\r\n                        <Table.Row>\r\n                            <Table.HeaderCell>Date</Table.HeaderCell>\r\n                            <Table.HeaderCell>Amount</Table.HeaderCell>\r\n                        </Table.Row>\r\n                    </Table.Header>\r\n                    <Table.Body>\r\n                        {this.getPaychecks().map(row => (\r\n                            <Table.Row key={row.date+row.amount}>\r\n                                <Table.Cell>{row.date}</Table.Cell>\r\n                                <Table.Cell><Currency value={row.amount} /></Table.Cell>\r\n                            </Table.Row>\r\n                        ))}\r\n                    </Table.Body>\r\n                </Table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PaycheckReport;","import React from 'react';\r\nimport {divStyling} from \"./styling\";\r\nimport {fixBudgetToMatchDeposits} from \"../api/backend\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nclass FixBudgetForm extends React.Component {\r\n\r\n    //TODO: Pull these from props?\r\n    transactionTypes = [\r\n        {transaction_type_id: 10, name: \"Spending\"},\r\n        {transaction_type_id: 5, name: \"Savings\"},\r\n    ];\r\n\r\n    state = {\r\n        transactionTypeId: 0,\r\n        redirect: false\r\n    };\r\n\r\n    submitUpdate = () => {\r\n        let budgetMonth = this.props.displayDate.getMonth();\r\n        let budgetYear = this.props.displayDate.getFullYear();\r\n        let transactionTypeId = this.state.transactionTypeId;\r\n        fixBudgetToMatchDeposits(budgetMonth, budgetYear, transactionTypeId, this.successCallback, this.errorCallback);\r\n    };\r\n\r\n    successCallback = () => {\r\n        let stateCopy = JSON.parse(JSON.stringify(this.state));\r\n        stateCopy.redirect = true;\r\n        this.setState(stateCopy);\r\n    };\r\n\r\n    errorCallback = (err) => {\r\n        console.log(err);\r\n        this.setState({\r\n            errorInfo: \"Could not get report.  See logs for details.\"\r\n        })\r\n    };\r\n\r\n    isFormDisabled = () => {\r\n        return this.getPaycheckBudgetDifference() === 0;\r\n    };\r\n\r\n    getPaycheckBudgetDifference = () => {\r\n        let budgetTotal = this.props.reportData.totalBudget;\r\n        let paycheckTotal = this.props.reportData.totalPaychecksPreviousMonth;\r\n        return (paycheckTotal - budgetTotal)/100;\r\n    };\r\n\r\n    getPaycheckBudgetDifferenceString = () => {\r\n        let diff = this.getPaycheckBudgetDifference().toFixed(2);\r\n        let nonNegDiff = Math.abs(diff);\r\n        let suffix = '$'.concat(String(nonNegDiff));\r\n        if (diff < 0) {\r\n            return '-'.concat(suffix);\r\n        } else {\r\n            return suffix;\r\n        }\r\n    };\r\n\r\n    handleTransactionTypeChange = (event) => {\r\n        this.setState({transactionTypeId: event.target.value});\r\n    };\r\n\r\n    render() {\r\n        if (this.state.redirect === true) {\r\n            return <Redirect to='budget/' />\r\n        }\r\n        let budgetDiff =this.getPaycheckBudgetDifferenceString();\r\n        let budgetNoticeText = this.isFormDisabled() ?\r\n            '' :\r\n            'There is a budget difference of '.concat(budgetDiff, '.');\r\n        return (\r\n            <div style={divStyling}>\r\n                <h5 className=\"ui center aligned header\">Fix Budget</h5>\r\n                <p>{budgetNoticeText}</p>\r\n                <form className=\"ui form\">\r\n\r\n                    <div className=\"required field\">\r\n                        <label>Transaction Type</label>\r\n                        <select className=\"ui search dropdown\" onChange={this.handleTransactionTypeChange}>\r\n                            <option value=\"\" />\r\n                            {this.transactionTypes.map(tt => (\r\n                                <option key={tt.transaction_type_id} value={tt.transaction_type_id}>{tt.name}</option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n                    <button className=\"ui button\" type=\"submit\" disabled={this.isFormDisabled()} onClick={this.submitUpdate}>Submit</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FixBudgetForm;","import React from 'react';\r\nimport Spinner from \"./Spinner\";\r\nimport {Table} from \"semantic-ui-react\";\r\nimport Currency from \"./Currency\";\r\nimport {divStyling} from \"./styling\";\r\nimport {budgetReport, createBudgetCommand, moveBudgetForwardCommand} from \"../api/backend\";\r\nimport PaycheckReport from \"./PaycheckReport\";\r\nimport FixBudgetForm from \"./FixBudgetForm\";\r\n\r\nclass BudgetReport extends React.Component {\r\n\r\n    addOneMonth = (date) => {\r\n        return new Date(date.getFullYear(), date.getMonth()+1);\r\n    };\r\n\r\n    subtractOneMonth = (date) => {\r\n        return new Date(date.getFullYear(), date.getMonth()-1);\r\n    };\r\n\r\n    isNextMonthAfterCurrentMonth(nextMonth) {\r\n        let current = new Date().getMonth();\r\n        let next = nextMonth.getMonth();\r\n        return next > current;\r\n    }\r\n\r\n    state = {\r\n        status: \"Waiting\",\r\n        reportData: {\"transactionTypeReports\":{\"1\":{\"transactionTypeId\":1,\"transactionTypeName\":\"Food\",\"budgetAmount\":100000,\"remainingAmount\":59037,\"sortOrderValue\":\"b\"}},\"totalBudget\":652840,\"totalRemainingBudget\":636737,\"paychecksPreviousMonthArray\":[{\"date\":\"2019-09-05\",\"amount\":326420},{\"date\":\"2019-09-20\",\"amount\":326420}],\"totalPaychecksPreviousMonth\":652840,\"discrepancyBetweenTotalBudgetAndPaychecks\":0},\r\n        errorInfo: \"\",\r\n        displayDate: new Date(),\r\n    };\r\n\r\n    canShowCreateBudgetButton = () => {\r\n        let budget = this.getBudgetTotal();\r\n        return budget === 0;\r\n    };\r\n\r\n    createBudget = () => {\r\n        createBudgetCommand(\r\n            this.state.displayDate.getMonth(),\r\n            this.state.displayDate.getFullYear(),\r\n            this.onCreateBudgetSuccess,\r\n            this.onError\r\n        );\r\n    };\r\n\r\n    onCreateBudgetSuccess = () => {\r\n        this.componentDidMount();\r\n    };\r\n\r\n    displayPreviousMonth = () => {\r\n        let previousMonth = this.subtractOneMonth(this.state.displayDate);\r\n        budgetReport(this.successCallback, this.errorCallback, previousMonth);\r\n    };\r\n\r\n    displayNextMonth = () => {\r\n        let nextMonth = this.addOneMonth(this.state.displayDate);\r\n        budgetReport(this.successCallback, this.errorCallback, nextMonth);\r\n    };\r\n\r\n    generateMonthString = (date) => {\r\n        return new Date(date.getFullYear(), date.getMonth()).toLocaleString('default', { month: 'long' });\r\n    };\r\n\r\n    yearMonthForHeading(date) {\r\n        const month = this.generateMonthString(date);\r\n        return month+\" \"+date.getFullYear();\r\n    }\r\n\r\n    componentDidMount() {\r\n        budgetReport(this.successCallback, this.errorCallback, this.state.displayDate);\r\n    }\r\n\r\n    successCallback = (response, responseDate) => {\r\n        this.setState({\r\n            status: \"Ready\",\r\n            errorInfo: \"\",\r\n            reportData: response,\r\n            displayDate: responseDate,\r\n        });\r\n    };\r\n\r\n    errorCallback = (err) => {\r\n        console.log(err);\r\n        this.setState({\r\n            status: \"Error\",\r\n            errorInfo: \"Could not get report.  See logs for details.\",\r\n            reportData: [],\r\n            displayDate: new Date()\r\n        })\r\n    };\r\n\r\n    getSortedBudgetRows() {\r\n        let localArray = Object.values(this.state.reportData.transactionTypeReports);\r\n        localArray.sort((a, b) => (a.sortOrderValue < b.sortOrderValue ? -1 : 1));\r\n        return localArray;\r\n    }\r\n\r\n    getBudgetTotal() {\r\n        return this.state.reportData.totalBudget;\r\n    }\r\n\r\n    getBudgetRemaining() {\r\n        return this.state.reportData.totalRemainingBudget;\r\n    }\r\n\r\n    onSuccess = () => {\r\n        console.log(\"Form submitted successfully.\");\r\n        let stateCopy = JSON.parse(JSON.stringify(this.state));\r\n        stateCopy.status = \"Waiting\";\r\n        this.setState(stateCopy);\r\n    };\r\n\r\n    onError = (error) => {\r\n        //TODO: Display error banner\r\n        console.log(error);\r\n    };\r\n\r\n    moveRemainingFundsToNextMonth = () => {\r\n        if (this.canMoveRemainingFundsToNextMonth()) {\r\n            moveBudgetForwardCommand(\r\n                this.state.displayDate.getMonth(),\r\n                this.state.displayDate.getFullYear(),\r\n                this.onSuccess,\r\n                this.onError\r\n            );\r\n        } else {\r\n            console.log(\"Cannot move funds because remaining funds are: \"+this.getBudgetRemaining());\r\n        }\r\n    };\r\n\r\n    canMoveRemainingFundsToNextMonth =() => {\r\n        let nextMonth = this.addOneMonth(this.state.displayDate);\r\n        let isViewingCurrentMonth = this.isNextMonthAfterCurrentMonth(nextMonth);\r\n        let isRemainingBudgetPositive = this.getBudgetRemaining() > 0;\r\n        return isRemainingBudgetPositive && !isViewingCurrentMonth;\r\n    };\r\n\r\n    render() {\r\n        let previousMonth = this.subtractOneMonth(this.state.displayDate);\r\n        let nextMonth = this.addOneMonth(this.state.displayDate);\r\n        let current = this.state.displayDate;\r\n        if (this.state.status === \"Waiting\") {\r\n            return <Spinner />;\r\n        } else if (this.state.status === \"Error\") {\r\n            return <h1>{this.state.errorInfo}</h1>;\r\n        } else {\r\n            return (\r\n                <div style={divStyling}>\r\n                    <h1 className=\"ui center aligned header\">Budget Report ({this.yearMonthForHeading(current)})</h1>\r\n                    <div className=\"ui center aligned container\">\r\n                        <button className=\"ui left labeled icon button\" onClick={this.displayPreviousMonth}>\r\n                            <i className=\"left arrow icon\" />\r\n                            {this.yearMonthForHeading(previousMonth)}\r\n                        </button>\r\n                        <button className=\"ui right labeled icon button\" onClick={this.displayNextMonth} disabled={this.isNextMonthAfterCurrentMonth(nextMonth)} >\r\n                            <i className=\"right arrow icon\" />\r\n                            {this.yearMonthForHeading(nextMonth)}\r\n                        </button>\r\n\r\n                        {this.canShowCreateBudgetButton() &&\r\n                            <button className=\"ui button\" onClick={this.createBudget}>\r\n                                Create Budget For This Month\r\n                            </button>\r\n                        }\r\n\r\n                    </div>\r\n                    <Table celled unstackable striped compact>\r\n                        <Table.Header>\r\n                            <Table.Row>\r\n                                <Table.HeaderCell>Category</Table.HeaderCell>\r\n                                <Table.HeaderCell>Budget</Table.HeaderCell>\r\n                                <Table.HeaderCell>Remaining</Table.HeaderCell>\r\n                            </Table.Row>\r\n                        </Table.Header>\r\n                        <Table.Body>\r\n                            {this.getSortedBudgetRows().map(row => (\r\n                                <Table.Row key={row.transactionTypeId}>\r\n                                    <Table.Cell>{row.transactionTypeName}</Table.Cell>\r\n                                    <Table.Cell><Currency value={row.budgetAmount} /></Table.Cell>\r\n                                    <Table.Cell><Currency value={row.remainingAmount} /></Table.Cell>\r\n                                </Table.Row>\r\n                            ))}\r\n                            <Table.Row key=\"totalRow\">\r\n                                <Table.Cell>Total</Table.Cell>\r\n                                <Table.Cell><Currency value={this.getBudgetTotal()} /></Table.Cell>\r\n                                <Table.Cell><Currency value={this.getBudgetRemaining()} /></Table.Cell>\r\n                            </Table.Row>\r\n                        </Table.Body>\r\n                    </Table>\r\n\r\n                    <div className=\"ui placeholder segment\">\r\n                        <div className=\"ui three column stackable center aligned internally celled grid\">\r\n                            <div className=\"middle aligned row\">\r\n                                <div className=\"column\">\r\n                                    <PaycheckReport reportData={this.state.reportData} />\r\n                                </div>\r\n                                <div className=\"column\">\r\n                                    <div>\r\n                                        <form>\r\n                                        <button className=\"ui button\" type=\"submit\" disabled={!this.canMoveRemainingFundsToNextMonth()} onClick={this.moveRemainingFundsToNextMonth}> Move Remaining Funds to Next Month</button>\r\n                                        </form>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"column\">\r\n                                    <div>\r\n                                        <FixBudgetForm reportData={this.state.reportData} displayDate={this.state.displayDate}/>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default BudgetReport;","import React from 'react';\r\nimport Spinner from \"./Spinner\";\r\nimport {Table} from \"semantic-ui-react\";\r\nimport Currency from \"./Currency\";\r\nimport {divStyling} from \"./styling\";\r\nimport {billsReport} from \"../api/backend\";\r\n\r\nclass BillsReport extends React.Component {\r\n\r\n    state = {\r\n        status: \"Waiting\",\r\n        reportData: {},\r\n        errorInfo: \"\"\r\n    };\r\n\r\n    componentDidMount() {\r\n        billsReport(this.successCallback, this.errorCallback);\r\n    }\r\n\r\n    successCallback = (response) => {\r\n        this.setState({\r\n            status: \"Ready\",\r\n            errorInfo: \"\",\r\n            reportData: response\r\n        });\r\n    };\r\n\r\n    errorCallback = (err) => {\r\n        console.log(err);\r\n        this.setState({\r\n            status: \"Error\",\r\n            errorInfo: \"Could not get report.  See logs for details.\",\r\n            reportData: []\r\n        })\r\n    };\r\n\r\n    getSortedRows() {\r\n        let localArray = Object.values(this.state.reportData.billPayments);\r\n        localArray.sort((a, b) => (new Date(a.lastPaymentDate) < new Date(b.lastPaymentDate) ? 1 : -1));\r\n        return localArray;\r\n    }\r\n\r\n    render() {\r\n        if (this.state.status === \"Waiting\") {\r\n            return <Spinner />;\r\n        } else if (this.state.status === \"Error\") {\r\n            return <h1>{this.state.errorInfo}</h1>;\r\n        } else {\r\n            return (\r\n                <div style={divStyling}>\r\n                    <h1 className=\"ui center aligned header\">Bills Report</h1>\r\n                    <Table celled unstackable striped>\r\n                        <Table.Header>\r\n                            <Table.Row>\r\n                                <Table.HeaderCell>Bill</Table.HeaderCell>\r\n                                <Table.HeaderCell>Due Day</Table.HeaderCell>\r\n                                <Table.HeaderCell>Last Payment Date</Table.HeaderCell>\r\n                                <Table.HeaderCell>Amount Paid</Table.HeaderCell>\r\n                            </Table.Row>\r\n                        </Table.Header>\r\n                        <Table.Body>\r\n                            {this.getSortedRows().map(row => (\r\n                                <Table.Row key={row.billName} active={row.autoPay === 1} >\r\n                                    <Table.Cell>{row.billName}</Table.Cell>\r\n                                    <Table.Cell>{row.dueDayOfMonth}</Table.Cell>\r\n                                    <Table.Cell>{row.lastPaymentDate}</Table.Cell>\r\n                                    <Table.Cell><Currency value={row.amountPaid} /></Table.Cell>\r\n                                </Table.Row>\r\n                            ))}\r\n                        </Table.Body>\r\n                    </Table>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default BillsReport;","import React from 'react';\r\nimport {divStyling} from \"./styling\";\r\nimport {createTransactionCommand, getCreateTransactionOptions} from \"../api/backend\";\r\nimport {Checkbox} from 'semantic-ui-react'\r\n// noinspection ES6CheckImport\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\n\r\nclass CreateTransactionForm extends React.Component {\r\n\r\n    state = {\r\n        formDateString: this.formatDate(new Date()),\r\n        creditAccountId: 0,\r\n        debitAccountId: 0,\r\n        transactionTypeId: 0,\r\n        description: \"\",\r\n        authAmt: 0.00,\r\n        settAmt: 0.00,\r\n        canReconcile: true,\r\n        redirect: false,\r\n        creditableAccounts: [\r\n            {account_id: 0, account_name: \"Scotty Checking Account\"},\r\n            {account_id: 1, account_name: \"Water Bill\"},\r\n            {account_id: 2, account_name: \"Wells Fargo Mortgage\"},\r\n            {account_id: 3, account_name: \"Shared Credit Card (7011)\"}\r\n        ],\r\n        debitableAccounts: [\r\n            {account_id: 0, account_name: \"Scotty Checking Account\"},\r\n            {account_id: 3, account_name: \"Shared Credit Card (7011)\"},\r\n            {account_id: 4, account_name: \"Personal Credit Card (5685)\"}\r\n        ],\r\n        transactionTypes: [\r\n            {transaction_type_id: 0, name: \"Spending\"},\r\n            {transaction_type_id: 1, name: \"Utilities\"},\r\n            {transaction_type_id: 2, name: \"Mortgage\"},\r\n        ],\r\n    };\r\n\r\n    onError = (error) => {\r\n        //TODO: Display error banner\r\n        console.log(error);\r\n    };\r\n\r\n    componentDidMount() {\r\n        getCreateTransactionOptions((data) => {\r\n            this.setState({\r\n                creditableAccounts: data.creditable_accounts,\r\n                debitableAccounts: data.debitable_accounts,\r\n                transactionTypes: data.transaction_types\r\n            });\r\n        });\r\n    }\r\n\r\n    selectedDateUpdated = (event) => {\r\n        let stateCopy = JSON.parse(JSON.stringify(this.state));\r\n        stateCopy.formDateString = event.target.value;\r\n        this.setState(stateCopy);\r\n    };\r\n\r\n    // noinspection DuplicatedCode\r\n    selectedCreditAccountUpdated = (event) => {\r\n        let accountName = event.target.options[event.target.selectedIndex].text;\r\n        let account = this.state.creditableAccounts.find(it => {\r\n            return it.account_name === accountName;\r\n        });\r\n\r\n        let stateCopy = JSON.parse(JSON.stringify(this.state));\r\n        stateCopy.creditAccountId = account.account_id;\r\n        this.setState(stateCopy);\r\n    };\r\n\r\n    // noinspection DuplicatedCode\r\n    selectedDebitAccountUpdated = (event) => {\r\n        let accountName = event.target.options[event.target.selectedIndex].text;\r\n        let account = this.state.debitableAccounts.find(it => {\r\n            return it.account_name === accountName;\r\n        });\r\n\r\n        let stateCopy = JSON.parse(JSON.stringify(this.state));\r\n        stateCopy.debitAccountId = account.account_id;\r\n        this.setState(stateCopy);\r\n    };\r\n\r\n    // noinspection DuplicatedCode\r\n    selectedTransactionTypeUpdated = (event) => {\r\n        let transactionTypeText = event.target.options[event.target.selectedIndex].text;\r\n        let transactionType = this.state.transactionTypes.find(it => {\r\n            return it.name === transactionTypeText;\r\n        });\r\n\r\n        let stateCopy = JSON.parse(JSON.stringify(this.state));\r\n        stateCopy.transactionTypeId = transactionType.transaction_type_id;\r\n        this.setState(stateCopy);\r\n    };\r\n\r\n    selectedDescriptionUpdated = (event) => {\r\n        let stateCopy = JSON.parse(JSON.stringify(this.state));\r\n        stateCopy.description = event.target.value;\r\n        this.setState(stateCopy);\r\n    };\r\n\r\n    selectedAuthorizedAmountUpdated = (event) => {\r\n        let stateCopy = JSON.parse(JSON.stringify(this.state));\r\n        stateCopy.authAmt = event.target.value;\r\n        this.setState(stateCopy);\r\n    };\r\n\r\n    selectedSettledAmountUpdated = (event) => {\r\n        let stateCopy = JSON.parse(JSON.stringify(this.state));\r\n        stateCopy.settAmt = event.target.value;\r\n        this.setState(stateCopy);\r\n    };\r\n\r\n    selectedToggleCanTxReconcileUpdated = (event) => {\r\n        let stateCopy = JSON.parse(JSON.stringify(this.state));\r\n        stateCopy.canReconcile = event.target.value;\r\n        this.setState(stateCopy);\r\n    };\r\n\r\n    formatDate(date) {\r\n        let d = date,\r\n            month = '' + (d.getMonth() + 1),\r\n            day = '' + d.getDate(),\r\n            year = d.getFullYear();\r\n\r\n        if (month.length < 2)\r\n            month = '0' + month;\r\n        if (day.length < 2)\r\n            day = '0' + day;\r\n\r\n        return [year, month, day].join('-');\r\n    }\r\n\r\n    submitTransaction = (event) => {\r\n        event.preventDefault();\r\n        createTransactionCommand(\r\n            this.state.formDateString,\r\n            this.state.creditAccountId,\r\n            this.state.debitAccountId,\r\n            this.state.transactionTypeId,\r\n            this.state.description,\r\n            this.state.authAmt,\r\n            this.state.settAmt,\r\n            this.state.canReconcile,\r\n            this.onSuccess,\r\n            this.onError\r\n        );\r\n    };\r\n\r\n    onSuccess = () => {\r\n        let stateCopy = JSON.parse(JSON.stringify(this.state));\r\n        stateCopy.redirect = true;\r\n        this.setState(stateCopy);\r\n    };\r\n\r\n    render() {\r\n        if (this.state.redirect === true) {\r\n            return <Redirect to='transaction/' />\r\n        }\r\n        const formattedDate = this.formatDate(new Date());\r\n        return (\r\n            <div style={divStyling}>\r\n                <h1 className=\"ui center aligned header\">Create Transaction</h1>\r\n                <form className=\"ui form\" onSubmit={this.submitTransaction}>\r\n\r\n                    <div className=\"required field\">\r\n                        <label>Date</label>\r\n                        <input type=\"date\" name=\"tx-date\" defaultValue={formattedDate} onChange={this.selectedDateUpdated} />\r\n                    </div>\r\n\r\n                    <div className=\"required field\">\r\n                        <label>Credit Account</label>\r\n                        <select className=\"ui search dropdown\" onChange={this.selectedCreditAccountUpdated}>\r\n                            <option value=\"\" />\r\n                            {this.state.creditableAccounts.map(acct => (\r\n                                <option key={acct.account_id} value={acct.account_id}>{acct.account_name}</option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div className=\"required field\">\r\n                        <label>Debit Account</label>\r\n                        <select className=\"ui search dropdown\" onChange={this.selectedDebitAccountUpdated}>\r\n                            <option value=\"\" />\r\n                            {this.state.debitableAccounts.map(acct => (\r\n                                <option key={acct.account_id} value={acct.account_id}>{acct.account_name}</option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div className=\"required field\">\r\n                        <label>Transaction Type</label>\r\n                        <select className=\"ui search dropdown\" onChange={this.selectedTransactionTypeUpdated}>\r\n                            <option value=\"\" />\r\n                            {this.state.transactionTypes.map(tt => (\r\n                                <option key={tt.transaction_type_id} value={tt.transaction_type_id}>{tt.name}</option>\r\n                            ))}\r\n                        </select>\r\n                    </div>\r\n\r\n                    <div className=\"required field\">\r\n                        <label>Description</label>\r\n                        <input type=\"text\" name=\"desc\" placeholder=\". . .\" onChange={this.selectedDescriptionUpdated} />\r\n                    </div>\r\n\r\n                    <div className=\"required field\">\r\n                        <label>Authorized Amount</label>\r\n                        <input type=\"text\" name=\"auth-amount\" placeholder=\"0.00\" onChange={this.selectedAuthorizedAmountUpdated} />\r\n                    </div>\r\n\r\n                    <div className=\"required field\">\r\n                        <label>Settled Amount</label>\r\n                        <input type=\"text\" name=\"sett-amount\" placeholder=\"0.00\" onChange={this.selectedSettledAmountUpdated} />\r\n                    </div>\r\n\r\n                    <div>\r\n                        <Checkbox label=\"Can this transaction reconcile?\" defaultChecked onChange={this.selectedToggleCanTxReconcileUpdated}/>\r\n                    </div>\r\n\r\n                    <button className=\"ui button\" type=\"submit\">Submit</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CreateTransactionForm;","import React from 'react';\r\nimport {Table} from \"semantic-ui-react\";\r\nimport {transactionHistory} from '../api/backend'\r\nimport Currency from \"./Currency\";\r\nimport Spinner from \"./Spinner\";\r\nimport {divStyling} from \"./styling\";\r\n\r\nclass TransactionReport extends React.Component {\r\n\r\n    state = {\r\n        status: \"Waiting\",\r\n        transactions: [{\r\n            transaction_date: \"\",\r\n            debit_account_name: \"\",\r\n            credit_account_name: \"\",\r\n            category: \"\",\r\n            description: \"\",\r\n            authorized_amount: \"\",\r\n            settled_amount: \"\",\r\n            credit_or_debit: \"\",\r\n            can_reconcile: \"\",\r\n            transaction_id: \"\"\r\n        }],\r\n        errorInfo: \"\"\r\n    };\r\n\r\n    componentDidMount() {\r\n        transactionHistory(this.successCallback, this.errorCallback);\r\n    }\r\n\r\n    successCallback = (response) => {\r\n        this.setState({\r\n            status: \"Ready\",\r\n            errorInfo: \"\",\r\n            transactions: response\r\n        });\r\n    };\r\n\r\n    errorCallback = (err) => {\r\n        console.log(err);\r\n        this.setState({\r\n            status: \"Error\",\r\n            errorInfo: \"Could not get transactions for report.  See logs for details.\",\r\n            transactions: []\r\n        })\r\n    };\r\n\r\n    render() {\r\n        if (this.state.status === \"Waiting\") {\r\n            return <Spinner />;\r\n        } else if (this.state.status === \"Error\") {\r\n            return <h1>{this.state.errorInfo}</h1>;\r\n        } else {\r\n            return (\r\n                <div style={divStyling}>\r\n                    <h1 className=\"ui center aligned header\">Transaction Report</h1>\r\n                    <Table celled unstackable striped>\r\n                        <Table.Header>\r\n                            <Table.Row>\r\n                                <Table.HeaderCell>Date</Table.HeaderCell>\r\n                                <Table.HeaderCell>Debit Account</Table.HeaderCell>\r\n                                <Table.HeaderCell>Credit Account</Table.HeaderCell>\r\n                                <Table.HeaderCell>Category</Table.HeaderCell>\r\n                                <Table.HeaderCell>Description</Table.HeaderCell>\r\n                                <Table.HeaderCell>Authorized Amount</Table.HeaderCell>\r\n                                <Table.HeaderCell>Settled Amount</Table.HeaderCell>\r\n                                <Table.HeaderCell>Report Amount</Table.HeaderCell>\r\n                                <Table.HeaderCell>Credit Or Debit</Table.HeaderCell>\r\n                                <Table.HeaderCell>Can Reconcile</Table.HeaderCell>\r\n                            </Table.Row>\r\n                        </Table.Header>\r\n                        <Table.Body>\r\n                            {this.state.transactions.map(row => (\r\n                                <Table.Row key={row.transaction_id+row.credit_or_debit}>\r\n                                    <Table.Cell>{row.transaction_date}</Table.Cell>\r\n                                    <Table.Cell>{row.debit_account_name}</Table.Cell>\r\n                                    <Table.Cell>{row.credit_account_name}</Table.Cell>\r\n                                    <Table.Cell>{row.category}</Table.Cell>\r\n                                    <Table.Cell>{row.description}</Table.Cell>\r\n                                    <Table.Cell><Currency value={row.authorized_amount} /></Table.Cell>\r\n                                    <Table.Cell><Currency value={row.settled_amount} /></Table.Cell>\r\n                                    <Table.Cell><Currency value={row.settled_amount * row.percentage/100}/></Table.Cell>\r\n                                    <Table.Cell>{row.credit_or_debit}</Table.Cell>\r\n                                    <Table.Cell>{String(row.can_reconcile)}</Table.Cell>\r\n                                </Table.Row>\r\n                            ))}\r\n                        </Table.Body>\r\n                    </Table>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default TransactionReport","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport '../App.css';\nimport Home from \"./Home\";\nimport BudgetReport from \"./BudgetReport\";\nimport BillsReport from \"./BillsReport\";\nimport CreateTransactionForm from \"./CreateTransactionForm\";\nimport TransactionReport from \"./TransactionReport\";\n\nclass App extends React.Component {\n\n    render() {\n        return (\n            <Router>\n                <div>\n                    <nav className=\"ui five item menu\">\n                        <Link to=\"/\" className=\"item\">Home</Link>\n                        <Link to=\"/create_transaction\" className=\"item\">Create Transaction</Link>\n                        <Link to=\"/transaction\" className=\"item\">Transaction Report</Link>\n                        <Link to=\"/budget\" className=\"item\">Budget Report</Link>\n                        <Link to=\"/bills\" className=\"item\">Bills Report</Link>\n                    </nav>\n\n                    {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n                    <Switch>\n                        <Route path=\"/create_transaction\">\n                            <CreateTransactionForm />\n                        </Route>\n                        <Route path=\"/transaction\">\n                            <TransactionReport />\n                        </Route>\n                        <Route path=\"/budget\">\n                            <BudgetReport />\n                        </Route>\n                        <Route path=\"/bills\">\n                            <BillsReport />\n                        </Route>\n                        <Route path=\"/\">\n                            <Home />\n                        </Route>\n                    </Switch>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}